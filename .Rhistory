## If so, it gets the inverse from the cache and skips the computation.
## Otherwise, it calculates the inverse of the data and sets the value of the inverse
## in the cache via the setinverse function.
cacheSolve <- function(x, ...) {
## Fetch inverse matrix for x
inv <- x$getinverse()
## Check if the inverse exists in cache and return the inverse if it exists
if(!is.null(inv)) {
print("Retrieving inverse from cache")
return(inv)
}
data <- x$get()
## check if x has a valid inverse; if doesn't, return NULL
if (det(data) == 0) {
print("Inverse does not exist")
return(NULL)
}
## calculate and return the inverse after setting it in cache
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## Following lines provide sample data and commands for running the script
## x <- matrix(c(1, 4, 5, 6, 2, 8, 9, 4, 2), nrow=3, ncol= 3)
## a<-makeCacheMatrix()
## a$set(x)
## cacheSolve(a)  // first time calculates and returns the inverse
## cacheSolve(a)  // second time returns the inverse from cache
## Cachematrix script contains two functions that demonstrate how Lexical Scoping rules
## can be used to calculate the inverse of matrix and cache the result
## by preserving state inside of an R Object
## makeCacheMatrix function creates a special "matrix",
## which is really a list containing a function to:
## 1.set the value of the matrix
## 2.get the value of the matrix
## 3.set the value of the inverse
## 4.get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
## Setter method to set the matrix in cache
set <- function(y) {
x <<- y
inv <<- NULL
}
## Getter method to retrieve the matrix from cache
get <- function() x
## Setter method to set the inverse of the matrix in cache
setinverse <- function(inverse) inv <<- inverse
## Getter method to get the inverse of the matrix from cache
getinverse <- function() inv
## return a list containing all the four functions
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve function calculates the inverse of the special "matrix" created with makeCacheMatrix function.
## However, it first checks to see if the inverse has already been calculated.
## If so, it gets the inverse from the cache and skips the computation.
## Otherwise, it calculates the inverse of the data and sets the value of the inverse
## in the cache via the setinverse function.
cacheSolve <- function(x, ...) {
## Fetch inverse matrix for x
inv <- x$getinverse()
## Check if the inverse exists in cache and return the inverse if it exists
if(!is.null(inv)) {
print("Retrieving inverse from cache")
return(inv)
}
data <- x$get()
## check if x has a valid inverse; if doesn't, return NULL
if (det(data) == 0) {
print("Inverse does not exist")
return(NULL)
}
## calculate and return the inverse after setting it in cache
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## Following lines provide sample data and commands for running the script
## x <- matrix(c(1, 4, 5, 6, 2, 8, 9, 4, 2), nrow=3, ncol= 3)
## a<-makeCacheMatrix()
## a$set(x)
## cacheSolve(a)  // first time calculates and returns the inverse
## cacheSolve(a)  // second time returns the inverse from cache
x <- matrix(c(1, 4, 5, 6, 2, 8, 9, 4, 2), nrow=3, ncol= 3)
a<-makeCacheMatrix()
a$set(x)
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
?length
length("73e27ae62799ece0baab5f7d3581f1132bd74f79")
x <- matrix(c(1, 4, 5, 6, 2, 8, 9, 4, 2), nrow=3, ncol= 3)
x %*% solve(x)
?plot
plot(1, 4)
plot(1:6, 4:9)
plot(1:6, 4:9)
plot()
plot(1:20, 1:20)
plot(1:20, 1:40)
plot(1:20, exp(1):exp(40)
)
plot(1:5, exp(1):exp(5))
plot(1:5, log(1):log(5))
?sqrt
plot(1:5, sqrt(1):sqrt(5))
plot(1:5, sqrt(1:5))
plot(-1:5, sqrt(-1:5))
plot(1:10, sqrt(1:10), "Number", "Square Root")
plot(1:10, sqrt(1:10), Number, "Square Root")
plot(1:10, sqrt(1:10))
library(jsonlite)
view
View
jsonData
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos"")
;
;
>
<
""
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$owner$login
jsonData$owner
myDF <- fromJSON(jsonData)
myDF <- fromJSON(jsonData)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
head(jsonData)
class(jsonData)
R.version.string
library(swirl)
ls()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
Use select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
info()
select(cran, -X:-size)
select(cran, -(X:size))
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(X:size))
cran
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes =
| mean(size))
)
summarize(cran, avg_bytes = mean(size))
swirl()
plot(1:5, 10:15)
plot(1:5, 11:15)
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
q
q()
getwd()
library(swirl)
swirl()
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate()
separate(res, sex_class, sep="_")
separate(res, sex_class, c("sex", "class"), sep="_")
info()
separate(sex_class, c("sex", "class"), sep="_")
separate(res, sex_class, c("sex", "class"), sep="_")
separate(res, sex_class, c("sex", "class"))
res
separate(res, sex_class, c("sex", "class"), -grade)
separate(res, sex_class, c("sex", "class"))
res <- separate(res, sex_class, c("sex", "class"))
res
res <- separate(res, sex_class, c("sex", "class"))
?separtate
?separate
separate(data = res, col = sex_class, into c("sex", "class"))
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
reset()
?gather
submit()
View(students3)
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
tocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
stocksm <- stocks %>% gather(stock, price, -time)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
stocksm
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
submit()
extract_numeric("class5")
?mutate
submit()
submit()
?mutate
mutate(class = extract_numeric(final))
mutate(class = extract_numeric(class))
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# extract_numeric(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?extract_numeric if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
submit()
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
reset()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 = extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
<
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
spread(test, grade) %>%
<
submit()
info()
submit()
submit()
students4
submit()
submit()
submit()
submit()
datasets
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
submit()
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment
?now()
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last-time <- as.POSIXct("June 17, 2008", tz = "Singapore")
?mdy
last-time <- mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(arrive, last_time)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
?Sys.timezone
Sys.timezone()
x <- read.csv("Coursera/Getting and Cleaning Data/getdata_data_ss06hid.csv")
x <- read.csv("Coursera/Getting and Cleaning Data/getdata_data_ss06hid.csv")
?strsplit
y <- strsplit(names(x), "wgtp")
head(y, n=123L)
x <- read.csv("Coursera/Getting and Cleaning Data/getdata_data_GDP.csv", skip=5)
View(x)
x <- read.csv("Coursera/Getting and Cleaning Data/getdata_data_GDP.csv", skip = 4, nrows = 215, stringsAsFactors = FALSE)
View(x)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(y ~ x | f, panel = function(X, Y, ...))
xyplot(y ~ x | f, panel = function(X, Y, ...))
xyplot(y ~ x | f, panel = function(X, Y, ...)
{}
;
xyplot(y ~ x | f, panel = function(X, Y, ...) {
panel.xyplot(x, y, ...)
panel.lines()
})
xyplot(y ~ x | f, panel = function(X, Y, ...) {
panel.xyplot(x, y, ...)
panel.lines()
})
xyplot(y ~ x | f, panel = function(X, Y, ...) {
panel.xyplot(x, y, ...)
panel.lines()
})
xyplot(y ~ x | f, panel = function(X, Y, ...) {
panel.xyplot(x, y, ...)
panel.text()
})
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
p <- g + geom_point()
print(p)
?text
?lpoints
?points
?lines
?lines
?points
?text
?lpoints
swirl()
install.packages(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
library("swirl")
library("swirl")
install.packages("evaluate")
library("swirl")
library("swirl")
library(swirl)
install.packages("yaml")
install.packages("yaml")
library(swirl)
install.packages(swirl)
install.packages("swirl")
getwd()
setwd("../RepData_PeerAssessment1/")
read.csv("activity.csv", )
?read.csv
myData <- read.csv("activity.csv", na.strings = "NA")
View(myData)
myDataByDate <- aggregate(steps ~ date, myData, sum(na.rm=true))
myDataByDate <- aggregate(steps ~ date, myData, sum(na.rm=TRUE))
myDataByDate <- aggregate(steps ~ date, myData, sum
)
View(myDataByDate)
?hist
hist2d(myDataByDate)
hist(myDataByDate, xlab = "Total daily steps", breaks = 20,
main = "Total of steps taken per day")
myDataByDate <- aggregate(steps ~ date, myData, sum)
hist(myDataByDate, xlab = "Total daily steps", breaks = 20,
main = "Total of steps taken per day")
?hist
?barplot
barplot(names.arg = myDataByDate$date,
height = myDataByDate$steps, col=c("orange"),
width = 0.5, xlim = c(0, 4),
xlab="Date", ylab="Total Steps"),
main=expression('Total Steps each day))
)
barplot(names.arg = myDataByDate$date,  height = myDataByDate$steps, col=c("orange"),
width = 0.5, xlim = c(0, 4),
xlab="Date", ylab="Total Steps",
main=expression("Total Steps each day"))
)
)
()
)
()
>
)))
exit
sadsad
?hist
getwd()
,
,
+
